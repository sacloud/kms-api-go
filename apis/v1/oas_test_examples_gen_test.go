// Code generated by ogen, DO NOT EDIT.

package v1

import (
	"github.com/go-faster/jx"

	std "encoding/json"
	"testing"

	"github.com/stretchr/testify/require"
)

func TestCreateKey_EncodeDecode(t *testing.T) {
	var typ CreateKey
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateKey
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDateTime_EncodeDecode(t *testing.T) {
	var typ DateTime
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DateTime
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestKey_EncodeDecode(t *testing.T) {
	var typ Key
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 Key
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestKeyOriginEnum_EncodeDecode(t *testing.T) {
	var typ KeyOriginEnum
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 KeyOriginEnum
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestPaginatedKeyList_EncodeDecode(t *testing.T) {
	var typ PaginatedKeyList
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 PaginatedKeyList
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestWrappedCreateKey_EncodeDecode(t *testing.T) {
	var typ WrappedCreateKey
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 WrappedCreateKey
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestWrappedKey_EncodeDecode(t *testing.T) {
	var typ WrappedKey
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 WrappedKey
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
