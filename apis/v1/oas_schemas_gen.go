// Code generated by ogen, DO NOT EDIT.

package v1

import (
	"github.com/go-faster/errors"
)

type BasicAuth struct {
	Username string
	Password string
	Roles    []string
}

// GetUsername returns the value of Username.
func (s *BasicAuth) GetUsername() string {
	return s.Username
}

// GetPassword returns the value of Password.
func (s *BasicAuth) GetPassword() string {
	return s.Password
}

// GetRoles returns the value of Roles.
func (s *BasicAuth) GetRoles() []string {
	return s.Roles
}

// SetUsername sets the value of Username.
func (s *BasicAuth) SetUsername(val string) {
	s.Username = val
}

// SetPassword sets the value of Password.
func (s *BasicAuth) SetPassword(val string) {
	s.Password = val
}

// SetRoles sets the value of Roles.
func (s *BasicAuth) SetRoles(val []string) {
	s.Roles = val
}

// Ref: #/components/schemas/ChangeKeyStatus
type ChangeKeyStatus struct {
	Status OptChangeKeyStatusStatus `json:"Status"`
}

// GetStatus returns the value of Status.
func (s *ChangeKeyStatus) GetStatus() OptChangeKeyStatusStatus {
	return s.Status
}

// SetStatus sets the value of Status.
func (s *ChangeKeyStatus) SetStatus(val OptChangeKeyStatusStatus) {
	s.Status = val
}

type ChangeKeyStatusStatus string

const (
	ChangeKeyStatusStatusActive     ChangeKeyStatusStatus = "active"
	ChangeKeyStatusStatusRestricted ChangeKeyStatusStatus = "restricted"
	ChangeKeyStatusStatusSuspended  ChangeKeyStatusStatus = "suspended"
)

// AllValues returns all ChangeKeyStatusStatus values.
func (ChangeKeyStatusStatus) AllValues() []ChangeKeyStatusStatus {
	return []ChangeKeyStatusStatus{
		ChangeKeyStatusStatusActive,
		ChangeKeyStatusStatusRestricted,
		ChangeKeyStatusStatusSuspended,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ChangeKeyStatusStatus) MarshalText() ([]byte, error) {
	switch s {
	case ChangeKeyStatusStatusActive:
		return []byte(s), nil
	case ChangeKeyStatusStatusRestricted:
		return []byte(s), nil
	case ChangeKeyStatusStatusSuspended:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ChangeKeyStatusStatus) UnmarshalText(data []byte) error {
	switch ChangeKeyStatusStatus(data) {
	case ChangeKeyStatusStatusActive:
		*s = ChangeKeyStatusStatusActive
		return nil
	case ChangeKeyStatusStatusRestricted:
		*s = ChangeKeyStatusStatusRestricted
		return nil
	case ChangeKeyStatusStatusSuspended:
		*s = ChangeKeyStatusStatusSuspended
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/CreateKey
type CreateKey struct {
	ID          string        `json:"ID"`
	CreatedAt   DateTime      `json:"CreatedAt"`
	ModifiedAt  DateTime      `json:"ModifiedAt"`
	Name        string        `json:"Name"`
	Description OptString     `json:"Description"`
	KeyOrigin   KeyOriginEnum `json:"KeyOrigin"`
	Tags        []string      `json:"Tags"`
	PlainKey    OptString     `json:"PlainKey"`
}

// GetID returns the value of ID.
func (s *CreateKey) GetID() string {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *CreateKey) GetCreatedAt() DateTime {
	return s.CreatedAt
}

// GetModifiedAt returns the value of ModifiedAt.
func (s *CreateKey) GetModifiedAt() DateTime {
	return s.ModifiedAt
}

// GetName returns the value of Name.
func (s *CreateKey) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *CreateKey) GetDescription() OptString {
	return s.Description
}

// GetKeyOrigin returns the value of KeyOrigin.
func (s *CreateKey) GetKeyOrigin() KeyOriginEnum {
	return s.KeyOrigin
}

// GetTags returns the value of Tags.
func (s *CreateKey) GetTags() []string {
	return s.Tags
}

// GetPlainKey returns the value of PlainKey.
func (s *CreateKey) GetPlainKey() OptString {
	return s.PlainKey
}

// SetID sets the value of ID.
func (s *CreateKey) SetID(val string) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *CreateKey) SetCreatedAt(val DateTime) {
	s.CreatedAt = val
}

// SetModifiedAt sets the value of ModifiedAt.
func (s *CreateKey) SetModifiedAt(val DateTime) {
	s.ModifiedAt = val
}

// SetName sets the value of Name.
func (s *CreateKey) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *CreateKey) SetDescription(val OptString) {
	s.Description = val
}

// SetKeyOrigin sets the value of KeyOrigin.
func (s *CreateKey) SetKeyOrigin(val KeyOriginEnum) {
	s.KeyOrigin = val
}

// SetTags sets the value of Tags.
func (s *CreateKey) SetTags(val []string) {
	s.Tags = val
}

// SetPlainKey sets the value of PlainKey.
func (s *CreateKey) SetPlainKey(val OptString) {
	s.PlainKey = val
}

type DateTime string

// Ref: #/components/schemas/Key
type Key struct {
	ID            string                 `json:"ID"`
	CreatedAt     DateTime               `json:"CreatedAt"`
	ModifiedAt    DateTime               `json:"ModifiedAt"`
	ServiceClass  OptKeyServiceClassEnum `json:"ServiceClass"`
	Name          string                 `json:"Name"`
	Description   string                 `json:"Description"`
	KeyOrigin     KeyOriginEnum          `json:"KeyOrigin"`
	LatestVersion OptInt                 `json:"LatestVersion"`
	Status        KeyStatusEnum          `json:"Status"`
	Tags          []string               `json:"Tags"`
}

// GetID returns the value of ID.
func (s *Key) GetID() string {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Key) GetCreatedAt() DateTime {
	return s.CreatedAt
}

// GetModifiedAt returns the value of ModifiedAt.
func (s *Key) GetModifiedAt() DateTime {
	return s.ModifiedAt
}

// GetServiceClass returns the value of ServiceClass.
func (s *Key) GetServiceClass() OptKeyServiceClassEnum {
	return s.ServiceClass
}

// GetName returns the value of Name.
func (s *Key) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *Key) GetDescription() string {
	return s.Description
}

// GetKeyOrigin returns the value of KeyOrigin.
func (s *Key) GetKeyOrigin() KeyOriginEnum {
	return s.KeyOrigin
}

// GetLatestVersion returns the value of LatestVersion.
func (s *Key) GetLatestVersion() OptInt {
	return s.LatestVersion
}

// GetStatus returns the value of Status.
func (s *Key) GetStatus() KeyStatusEnum {
	return s.Status
}

// GetTags returns the value of Tags.
func (s *Key) GetTags() []string {
	return s.Tags
}

// SetID sets the value of ID.
func (s *Key) SetID(val string) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Key) SetCreatedAt(val DateTime) {
	s.CreatedAt = val
}

// SetModifiedAt sets the value of ModifiedAt.
func (s *Key) SetModifiedAt(val DateTime) {
	s.ModifiedAt = val
}

// SetServiceClass sets the value of ServiceClass.
func (s *Key) SetServiceClass(val OptKeyServiceClassEnum) {
	s.ServiceClass = val
}

// SetName sets the value of Name.
func (s *Key) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *Key) SetDescription(val string) {
	s.Description = val
}

// SetKeyOrigin sets the value of KeyOrigin.
func (s *Key) SetKeyOrigin(val KeyOriginEnum) {
	s.KeyOrigin = val
}

// SetLatestVersion sets the value of LatestVersion.
func (s *Key) SetLatestVersion(val OptInt) {
	s.LatestVersion = val
}

// SetStatus sets the value of Status.
func (s *Key) SetStatus(val KeyStatusEnum) {
	s.Status = val
}

// SetTags sets the value of Tags.
func (s *Key) SetTags(val []string) {
	s.Tags = val
}

// Ref: #/components/schemas/KeyCipher
type KeyCipher struct {
	// 暗号化エンドポイントのレスポンス.
	Cipher string `json:"Cipher"`
}

// GetCipher returns the value of Cipher.
func (s *KeyCipher) GetCipher() string {
	return s.Cipher
}

// SetCipher sets the value of Cipher.
func (s *KeyCipher) SetCipher(val string) {
	s.Cipher = val
}

// * `aes-256-gcm` - AES256-GCMモードでの暗号化(default)
// * `aes-256-cbc` - AES256-CBCモードでの暗号化
// * `aes-256-kw` - AES256-KWモードでの暗号化.
// Ref: #/components/schemas/KeyEncryptAlgoEnum
type KeyEncryptAlgoEnum string

const (
	KeyEncryptAlgoEnumAes256Gcm KeyEncryptAlgoEnum = "aes-256-gcm"
	KeyEncryptAlgoEnumAes256Cbc KeyEncryptAlgoEnum = "aes-256-cbc"
	KeyEncryptAlgoEnumAes256Kw  KeyEncryptAlgoEnum = "aes-256-kw"
)

// AllValues returns all KeyEncryptAlgoEnum values.
func (KeyEncryptAlgoEnum) AllValues() []KeyEncryptAlgoEnum {
	return []KeyEncryptAlgoEnum{
		KeyEncryptAlgoEnumAes256Gcm,
		KeyEncryptAlgoEnumAes256Cbc,
		KeyEncryptAlgoEnumAes256Kw,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s KeyEncryptAlgoEnum) MarshalText() ([]byte, error) {
	switch s {
	case KeyEncryptAlgoEnumAes256Gcm:
		return []byte(s), nil
	case KeyEncryptAlgoEnumAes256Cbc:
		return []byte(s), nil
	case KeyEncryptAlgoEnumAes256Kw:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *KeyEncryptAlgoEnum) UnmarshalText(data []byte) error {
	switch KeyEncryptAlgoEnum(data) {
	case KeyEncryptAlgoEnumAes256Gcm:
		*s = KeyEncryptAlgoEnumAes256Gcm
		return nil
	case KeyEncryptAlgoEnumAes256Cbc:
		*s = KeyEncryptAlgoEnumAes256Cbc
		return nil
	case KeyEncryptAlgoEnumAes256Kw:
		*s = KeyEncryptAlgoEnumAes256Kw
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// * `generated` - 生成
// * `imported` - インポート.
// Ref: #/components/schemas/KeyOriginEnum
type KeyOriginEnum string

const (
	KeyOriginEnumGenerated KeyOriginEnum = "generated"
	KeyOriginEnumImported  KeyOriginEnum = "imported"
)

// AllValues returns all KeyOriginEnum values.
func (KeyOriginEnum) AllValues() []KeyOriginEnum {
	return []KeyOriginEnum{
		KeyOriginEnumGenerated,
		KeyOriginEnumImported,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s KeyOriginEnum) MarshalText() ([]byte, error) {
	switch s {
	case KeyOriginEnumGenerated:
		return []byte(s), nil
	case KeyOriginEnumImported:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *KeyOriginEnum) UnmarshalText(data []byte) error {
	switch KeyOriginEnum(data) {
	case KeyOriginEnumGenerated:
		*s = KeyOriginEnumGenerated
		return nil
	case KeyOriginEnumImported:
		*s = KeyOriginEnumImported
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/KeyPlain
type KeyPlain struct {
	// Base64でエンコードされた平文.
	Plain string                `json:"Plain"`
	Algo  OptKeyEncryptAlgoEnum `json:"Algo"`
}

// GetPlain returns the value of Plain.
func (s *KeyPlain) GetPlain() string {
	return s.Plain
}

// GetAlgo returns the value of Algo.
func (s *KeyPlain) GetAlgo() OptKeyEncryptAlgoEnum {
	return s.Algo
}

// SetPlain sets the value of Plain.
func (s *KeyPlain) SetPlain(val string) {
	s.Plain = val
}

// SetAlgo sets the value of Algo.
func (s *KeyPlain) SetAlgo(val OptKeyEncryptAlgoEnum) {
	s.Algo = val
}

// Ref: #/components/schemas/KeyServiceClassEnum
type KeyServiceClassEnum string

const (
	KeyServiceClassEnumCloudKmsKey       KeyServiceClassEnum = "cloud/kms/key"
	KeyServiceClassEnumCloudKmsKeyLegacy KeyServiceClassEnum = "cloud/kms/key/legacy"
)

// AllValues returns all KeyServiceClassEnum values.
func (KeyServiceClassEnum) AllValues() []KeyServiceClassEnum {
	return []KeyServiceClassEnum{
		KeyServiceClassEnumCloudKmsKey,
		KeyServiceClassEnumCloudKmsKeyLegacy,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s KeyServiceClassEnum) MarshalText() ([]byte, error) {
	switch s {
	case KeyServiceClassEnumCloudKmsKey:
		return []byte(s), nil
	case KeyServiceClassEnumCloudKmsKeyLegacy:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *KeyServiceClassEnum) UnmarshalText(data []byte) error {
	switch KeyServiceClassEnum(data) {
	case KeyServiceClassEnumCloudKmsKey:
		*s = KeyServiceClassEnumCloudKmsKey
		return nil
	case KeyServiceClassEnumCloudKmsKeyLegacy:
		*s = KeyServiceClassEnumCloudKmsKeyLegacy
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// * `active` - 有効
// * `restricted` - 復号と署名検証にのみ利用可能
// * `suspended` - 利用不可
// * `pending_destruction` - 削除猶予.
// Ref: #/components/schemas/KeyStatusEnum
type KeyStatusEnum string

const (
	KeyStatusEnumActive             KeyStatusEnum = "active"
	KeyStatusEnumRestricted         KeyStatusEnum = "restricted"
	KeyStatusEnumSuspended          KeyStatusEnum = "suspended"
	KeyStatusEnumPendingDestruction KeyStatusEnum = "pending_destruction"
)

// AllValues returns all KeyStatusEnum values.
func (KeyStatusEnum) AllValues() []KeyStatusEnum {
	return []KeyStatusEnum{
		KeyStatusEnumActive,
		KeyStatusEnumRestricted,
		KeyStatusEnumSuspended,
		KeyStatusEnumPendingDestruction,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s KeyStatusEnum) MarshalText() ([]byte, error) {
	switch s {
	case KeyStatusEnumActive:
		return []byte(s), nil
	case KeyStatusEnumRestricted:
		return []byte(s), nil
	case KeyStatusEnumSuspended:
		return []byte(s), nil
	case KeyStatusEnumPendingDestruction:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *KeyStatusEnum) UnmarshalText(data []byte) error {
	switch KeyStatusEnum(data) {
	case KeyStatusEnumActive:
		*s = KeyStatusEnumActive
		return nil
	case KeyStatusEnumRestricted:
		*s = KeyStatusEnumRestricted
		return nil
	case KeyStatusEnumSuspended:
		*s = KeyStatusEnumSuspended
		return nil
	case KeyStatusEnumPendingDestruction:
		*s = KeyStatusEnumPendingDestruction
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// KmsKeysDestroyNoContent is response for KmsKeysDestroy operation.
type KmsKeysDestroyNoContent struct{}

// KmsKeysRotateForbidden is response for KmsKeysRotate operation.
type KmsKeysRotateForbidden struct{}

func (*KmsKeysRotateForbidden) kmsKeysRotateRes() {}

// KmsKeysScheduleDestructionOK is response for KmsKeysScheduleDestruction operation.
type KmsKeysScheduleDestructionOK struct{}

// KmsKeysStatusOK is response for KmsKeysStatus operation.
type KmsKeysStatusOK struct{}

// NewOptChangeKeyStatusStatus returns new OptChangeKeyStatusStatus with value set to v.
func NewOptChangeKeyStatusStatus(v ChangeKeyStatusStatus) OptChangeKeyStatusStatus {
	return OptChangeKeyStatusStatus{
		Value: v,
		Set:   true,
	}
}

// OptChangeKeyStatusStatus is optional ChangeKeyStatusStatus.
type OptChangeKeyStatusStatus struct {
	Value ChangeKeyStatusStatus
	Set   bool
}

// IsSet returns true if OptChangeKeyStatusStatus was set.
func (o OptChangeKeyStatusStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChangeKeyStatusStatus) Reset() {
	var v ChangeKeyStatusStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChangeKeyStatusStatus) SetTo(v ChangeKeyStatusStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChangeKeyStatusStatus) Get() (v ChangeKeyStatusStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptChangeKeyStatusStatus) Or(d ChangeKeyStatusStatus) ChangeKeyStatusStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptKeyEncryptAlgoEnum returns new OptKeyEncryptAlgoEnum with value set to v.
func NewOptKeyEncryptAlgoEnum(v KeyEncryptAlgoEnum) OptKeyEncryptAlgoEnum {
	return OptKeyEncryptAlgoEnum{
		Value: v,
		Set:   true,
	}
}

// OptKeyEncryptAlgoEnum is optional KeyEncryptAlgoEnum.
type OptKeyEncryptAlgoEnum struct {
	Value KeyEncryptAlgoEnum
	Set   bool
}

// IsSet returns true if OptKeyEncryptAlgoEnum was set.
func (o OptKeyEncryptAlgoEnum) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptKeyEncryptAlgoEnum) Reset() {
	var v KeyEncryptAlgoEnum
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptKeyEncryptAlgoEnum) SetTo(v KeyEncryptAlgoEnum) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptKeyEncryptAlgoEnum) Get() (v KeyEncryptAlgoEnum, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptKeyEncryptAlgoEnum) Or(d KeyEncryptAlgoEnum) KeyEncryptAlgoEnum {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptKeyServiceClassEnum returns new OptKeyServiceClassEnum with value set to v.
func NewOptKeyServiceClassEnum(v KeyServiceClassEnum) OptKeyServiceClassEnum {
	return OptKeyServiceClassEnum{
		Value: v,
		Set:   true,
	}
}

// OptKeyServiceClassEnum is optional KeyServiceClassEnum.
type OptKeyServiceClassEnum struct {
	Value KeyServiceClassEnum
	Set   bool
}

// IsSet returns true if OptKeyServiceClassEnum was set.
func (o OptKeyServiceClassEnum) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptKeyServiceClassEnum) Reset() {
	var v KeyServiceClassEnum
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptKeyServiceClassEnum) SetTo(v KeyServiceClassEnum) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptKeyServiceClassEnum) Get() (v KeyServiceClassEnum, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptKeyServiceClassEnum) Or(d KeyServiceClassEnum) KeyServiceClassEnum {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/PaginatedKeyList
type PaginatedKeyList struct {
	Count int    `json:"Count"`
	From  OptInt `json:"From"`
	Total OptInt `json:"Total"`
	Keys  []Key  `json:"Keys"`
}

// GetCount returns the value of Count.
func (s *PaginatedKeyList) GetCount() int {
	return s.Count
}

// GetFrom returns the value of From.
func (s *PaginatedKeyList) GetFrom() OptInt {
	return s.From
}

// GetTotal returns the value of Total.
func (s *PaginatedKeyList) GetTotal() OptInt {
	return s.Total
}

// GetKeys returns the value of Keys.
func (s *PaginatedKeyList) GetKeys() []Key {
	return s.Keys
}

// SetCount sets the value of Count.
func (s *PaginatedKeyList) SetCount(val int) {
	s.Count = val
}

// SetFrom sets the value of From.
func (s *PaginatedKeyList) SetFrom(val OptInt) {
	s.From = val
}

// SetTotal sets the value of Total.
func (s *PaginatedKeyList) SetTotal(val OptInt) {
	s.Total = val
}

// SetKeys sets the value of Keys.
func (s *PaginatedKeyList) SetKeys(val []Key) {
	s.Keys = val
}

// Ref: #/components/schemas/ScheduleDestructionKey
type ScheduleDestructionKey struct {
	// 鍵を削除するまでの猶予期間を日数で指定します。
	// 7日から14日を指定できます。実際に削除されるのはこの予定時刻よりも後ろになります。.
	PendingDays int `json:"PendingDays"`
}

// GetPendingDays returns the value of PendingDays.
func (s *ScheduleDestructionKey) GetPendingDays() int {
	return s.PendingDays
}

// SetPendingDays sets the value of PendingDays.
func (s *ScheduleDestructionKey) SetPendingDays(val int) {
	s.PendingDays = val
}

// Ref: #/components/schemas/WrappedChangeKeyStatus
type WrappedChangeKeyStatus struct {
	Key ChangeKeyStatus `json:"Key"`
}

// GetKey returns the value of Key.
func (s *WrappedChangeKeyStatus) GetKey() ChangeKeyStatus {
	return s.Key
}

// SetKey sets the value of Key.
func (s *WrappedChangeKeyStatus) SetKey(val ChangeKeyStatus) {
	s.Key = val
}

// Ref: #/components/schemas/WrappedCreateKey
type WrappedCreateKey struct {
	Key CreateKey `json:"Key"`
}

// GetKey returns the value of Key.
func (s *WrappedCreateKey) GetKey() CreateKey {
	return s.Key
}

// SetKey sets the value of Key.
func (s *WrappedCreateKey) SetKey(val CreateKey) {
	s.Key = val
}

// Ref: #/components/schemas/WrappedKey
type WrappedKey struct {
	Key Key `json:"Key"`
}

// GetKey returns the value of Key.
func (s *WrappedKey) GetKey() Key {
	return s.Key
}

// SetKey sets the value of Key.
func (s *WrappedKey) SetKey(val Key) {
	s.Key = val
}

func (*WrappedKey) kmsKeysRotateRes() {}

// Ref: #/components/schemas/WrappedKeyCipher
type WrappedKeyCipher struct {
	Key KeyCipher `json:"Key"`
}

// GetKey returns the value of Key.
func (s *WrappedKeyCipher) GetKey() KeyCipher {
	return s.Key
}

// SetKey sets the value of Key.
func (s *WrappedKeyCipher) SetKey(val KeyCipher) {
	s.Key = val
}

// Ref: #/components/schemas/WrappedKeyPlain
type WrappedKeyPlain struct {
	Key KeyPlain `json:"Key"`
}

// GetKey returns the value of Key.
func (s *WrappedKeyPlain) GetKey() KeyPlain {
	return s.Key
}

// SetKey sets the value of Key.
func (s *WrappedKeyPlain) SetKey(val KeyPlain) {
	s.Key = val
}

// Ref: #/components/schemas/WrappedScheduleDestructionKey
type WrappedScheduleDestructionKey struct {
	Key ScheduleDestructionKey `json:"Key"`
}

// GetKey returns the value of Key.
func (s *WrappedScheduleDestructionKey) GetKey() ScheduleDestructionKey {
	return s.Key
}

// SetKey sets the value of Key.
func (s *WrappedScheduleDestructionKey) SetKey(val ScheduleDestructionKey) {
	s.Key = val
}
